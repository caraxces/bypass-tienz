require('dotenv').config({ path: './.env' });
const supabase = require('./supabaseClient');

async function updateSupabaseSchema() {
    console.log('üîß Updating Supabase database schema...\n');
    
    try {
        // 1. C·∫≠p nh·∫≠t b·∫£ng projects - th√™m c√°c c·ªôt c√≤n thi·∫øu
        console.log('üìã Updating projects table...');
        
        // Th√™m c·ªôt slug n·∫øu ch∆∞a c√≥
        try {
            const { error: slugError } = await supabase.rpc('exec_sql', {
                sql: 'ALTER TABLE projects ADD COLUMN IF NOT EXISTS slug VARCHAR(500);'
            });
            if (slugError) {
                console.log('   ‚Üí Slug column already exists or cannot be added');
            } else {
                console.log('   ‚úÖ Added slug column');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot add slug column automatically');
        }
        
        // Th√™m c·ªôt language n·∫øu ch∆∞a c√≥
        try {
            const { error: langError } = await supabase.rpc('exec_sql', {
                sql: 'ALTER TABLE projects ADD COLUMN IF NOT EXISTS language VARCHAR(50) DEFAULT \'vi\';'
            });
            if (langError) {
                console.log('   ‚Üí Language column already exists or cannot be added');
            } else {
                console.log('   ‚úÖ Added language column');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot add language column automatically');
        }
        
        // Th√™m c·ªôt country n·∫øu ch∆∞a c√≥
        try {
            const { error: countryError } = await supabase.rpc('exec_sql', {
                sql: 'ALTER TABLE projects ADD COLUMN IF NOT EXISTS country VARCHAR(50) DEFAULT \'Vietnam\';'
            });
            if (countryError) {
                console.log('   ‚Üí Country column already exists or cannot be added');
            } else {
                console.log('   ‚úÖ Added country column');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot add country column automatically');
        }
        
        // Th√™m c·ªôt device n·∫øu ch∆∞a c√≥
        try {
            const { error: deviceError } = await supabase.rpc('exec_sql', {
                sql: 'ALTER TABLE projects ADD COLUMN IF NOT EXISTS device VARCHAR(50) DEFAULT \'desktop\';'
            });
            if (deviceError) {
                console.log('   ‚Üí Device column already exists or cannot be added');
            } else {
                console.log('   ‚úÖ Added device column');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot add device column automatically');
        }
        
        // 2. C·∫≠p nh·∫≠t b·∫£ng keywords - th√™m c√°c c·ªôt t·ª´ database c≈©
        console.log('\nüìã Updating keywords table...');
        
        // Th√™m c·ªôt position (pos t·ª´ DB c≈©)
        try {
            const { error: posError } = await supabase.rpc('exec_sql', {
                sql: 'ALTER TABLE keywords ADD COLUMN IF NOT EXISTS position INTEGER;'
            });
            if (posError) {
                console.log('   ‚Üí Position column already exists or cannot be added');
            } else {
                console.log('   ‚úÖ Added position column');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot add position column automatically');
        }
        
        // Th√™m c·ªôt best_position (bestPos t·ª´ DB c≈©)
        try {
            const { error: bestPosError } = await supabase.rpc('exec_sql', {
                sql: 'ALTER TABLE keywords ADD COLUMN IF NOT EXISTS best_position INTEGER;'
            });
            if (bestPosError) {
                console.log('   ‚Üí Best position column already exists or cannot be added');
            } else {
                console.log('   ‚úÖ Added best position column');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot add best position column automatically');
        }
        
        // Th√™m c·ªôt full_url (fullUrl t·ª´ DB c≈©)
        try {
            const { error: urlError } = await supabase.rpc('exec_sql', {
                sql: 'ALTER TABLE keywords ADD COLUMN IF NOT EXISTS full_url TEXT;'
            });
            if (urlError) {
                console.log('   ‚Üí Full URL column already exists or cannot be added');
            } else {
                console.log('   ‚úÖ Added full URL column');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot add full URL column automatically');
        }
        
        // Th√™m c·ªôt last_checked (lastChecked t·ª´ DB c≈©)
        try {
            const { error: checkedError } = await supabase.rpc('exec_sql', {
                sql: 'ALTER TABLE keywords ADD COLUMN IF NOT EXISTS last_checked TIMESTAMP WITH TIME ZONE;'
            });
            if (checkedError) {
                console.log('   ‚Üí Last checked column already exists or cannot be added');
            } else {
                console.log('   ‚úÖ Added last checked column');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot add last checked column automatically');
        }
        
        // Th√™m c·ªôt has_error (hasError t·ª´ DB c≈©)
        try {
            const { error: errorError } = await supabase.rpc('exec_sql', {
                sql: 'ALTER TABLE keywords ADD COLUMN IF NOT EXISTS has_error BOOLEAN DEFAULT FALSE;'
            });
            if (errorError) {
                console.log('   ‚Üí Has error column already exists or cannot be added');
            } else {
                console.log('   ‚úÖ Added has error column');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot add has error column automatically');
        }
        
        // 3. T·∫°o b·∫£ng crawl_history n·∫øu ch∆∞a c√≥
        console.log('\nüìã Creating crawl_history table...');
        try {
            const { error: crawlError } = await supabase.rpc('exec_sql', {
                sql: `
                    CREATE TABLE IF NOT EXISTS crawl_history (
                        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                        start_url TEXT NOT NULL,
                        status VARCHAR(50) DEFAULT 'running',
                        pages_crawled INTEGER DEFAULT 0,
                        max_pages INTEGER DEFAULT 10000,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                        finished_at TIMESTAMP WITH TIME ZONE,
                        user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE
                    );
                `
            });
            if (crawlError) {
                console.log('   ‚Üí Crawl history table already exists or cannot be created');
            } else {
                console.log('   ‚úÖ Created crawl_history table');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot create crawl_history table automatically');
        }
        
        // 4. T·∫°o b·∫£ng schemas n·∫øu ch∆∞a c√≥
        console.log('\nüìã Creating schemas table...');
        try {
            const { error: schemasError } = await supabase.rpc('exec_sql', {
                sql: `
                    CREATE TABLE IF NOT EXISTS schemas (
                        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                        name VARCHAR(255) NOT NULL,
                        content JSONB NOT NULL,
                        project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    );
                `
            });
            if (schemasError) {
                console.log('   ‚Üí Schemas table already exists or cannot be created');
            } else {
                console.log('   ‚úÖ Created schemas table');
            }
        } catch (e) {
            console.log('   ‚Üí Cannot create schemas table automatically');
        }
        
        console.log('\nüéØ Schema update completed!');
        console.log('\nüìù Note: If some columns/tables could not be added automatically,');
        console.log('   you may need to add them manually in the Supabase dashboard.');
        
    } catch (error) {
        console.error('‚ùå Error updating schema:', error);
    }
}

updateSupabaseSchema();
